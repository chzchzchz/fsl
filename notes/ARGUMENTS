Domain specific languages are gaining popularity but no one is actually implementing anything in them or are not enough 
* FIST - lets me describe layers on top of existing filesystems. That's nice, but I want to describe disk layouts, etc.
* xoc - Lets me do compiler extensions, but is a general framework and not a general systme pattern

But what about writing operating systems in functional langauges?
Hello operating system - haskell-- mainly a 'proof' of concept and does not delve into deeper aspects of the structure of the operating system
Who were the guys that did the formally verified OS?



Why write a new language? Why not use an existing language such as Python, ...?
* I need a language that can run in kernel stacks; this means it can run with as few as 4096 bytes of stack space. Regardless, all have hooks into the C lib which means pulling in a ton of code or porting to run raw.
* Want reduced flexibility, not more.
Do we need this?
* Model checkers finding major bugs in filesystems.
* Cost of building a new filesystem is high -- look at btrfs and ext4 (timelines..)
* Lots of filesystems go unmaintained in the kernel; if it's so easy, why isn't everything going ahead? See the jfs amd64 bug.



What if something changes to the interface?
* The vnode interface has been stable for some time. Even so, it means changing the compiler to reflect this new target. On the otherhand, porting to the new target is expected to be easier than porting all the filesystems in the long run.

What if I want something new-fangled feature (i.e. net-interaction...)?
* At the moment this is intended primarily for disk that ensure a partial ordering; if I write T to A, I expect to read back T from B. Note: coherent but not necessarily consistent-- this is why we have fs logic..
* On the other hand, we can handle user-interface problems by providing an ioctl interface. 
* Will have to be ported to compiler, but then every fs can use it instead of just your one.


Contributions:
	* A language to describe filesystems
	* Succinct implementations of existing filesystems
	* Ported to several 'driver' interfaces
		linux kernel
		fuse
		bsd
		???
	* New filesystems?
