/* written to fix barry's busted hd */

const __FSL_FSNAME = hfsplus;
const __FSL_MODE = 1; /* big endian */

include "hfsplus_funcs.fsl"

/* XXX: I don't have signed types?? */
typedef s8 = u8;
typedef s16 = u16;

/* Some constants */
const HFSPLUS_SECTOR_SIZE 		= 512;
const HFSPLUS_SECTOR_SHIFT		= 9;
const HFSPLUS_VOLHEAD_SECTOR		= 2;
const HFSPLUS_VOLHEAD_SIG 		= 0x482b;
const HFSPLUS_VOLHEAD_SIGX 		= 0x4858;
const HFSPLUS_SUPER_MAGIC		= 0x482b;
const HFSPLUS_MIN_VERSION		= 4;
const HFSPLUS_CURRENT_VERSION		= 5;

const HFSP_WRAP_MAGIC			= 0x4244;
const HFSP_WRAP_ATTRIB_SLOCK		= 0x8000;
const HFSP_WRAP_ATTRIB_SPARED		= 0x0200;

const HFSP_WRAPOFF_SIG		= 0x00;
const HFSP_WRAPOFF_ATTRIB	= 0x0A;
const HFSP_WRAPOFF_ABLKSIZE	= 0x14;
const HFSP_WRAPOFF_ABLKSTART	= 0x1C;
const HFSP_WRAPOFF_EMBEDSIG	= 0x7C;
const HFSP_WRAPOFF_EMBEDEXT	= 0x7E;

//const HFSP_HIDDENDIR_NAME \
//	"\xe2\x90\x80\xe2\x90\x80\xe2\x90\x80\xe2\x90\x80HFS+ Private Data"

const HFSP_HARDLINK_TYPE	= 0x686c6e6b;	/* 'hlnk' */
const HFSP_HFSPLUS_CREATOR	= 0x6866732b;	/* 'hfs+' */

const HFSP_SYMLINK_TYPE		= 0x736c6e6b;	/* 'slnk' */
const HFSP_SYMLINK_CREATOR	= 0x72686170;	/* 'rhap' */

const HFSP_MOUNT_VERSION	= 0x482b4c78;	/* 'H+Lx' */

/* catalog id */
typedef hfsplus_cnid = u32;
typedef hfsplus_unichr = u16;

const HFSPLUS_MAX_STRLEN	= 255;
const HFSPLUS_ATTR_MAX_STRLEN	= 127;

/* A "string" as used in filenames, etc. */
type hfsplus_unistr {
	u16 length;
	hfsplus_unichr unicode[HFSPLUS_MAX_STRLEN];
}

/*
 * A "string" is used in attributes file
 * for name of extended attribute
 */
type hfsplus_attr_unistr {
	u16 length;
	hfsplus_unichr unicode[HFSPLUS_ATTR_MAX_STRLEN];
}

/* POSIX permissions */
type hfsplus_perm {
	u32 owner;
	u32 group;
	u8 rootflags;
	u8 userflags;
	u16 mode;
	u32 dev;
}

const HFSPLUS_FLG_NODUMP	= 0x01;
const HFSPLUS_FLG_IMMUTABLE	= 0x02;
const HFSPLUS_FLG_APPEND	= 0x04;

/* A single contiguous area of a file */
type hfsplus_extent
points_range(i, 1, block_count, disk.blocks[start_block+(i-1)]) as blocks
assert (? start_block < get_total_blocks()) as chk_startblock
assert (? start_block + block_count < get_total_blocks()) as chk_endblock
{
	u32 start_block;
	u32 block_count;
}

type hfsplus_extent_rec
points_range(idx, 1, extrec_blks(this), extrec_idx2blk(this, idx-1)) as blocks
{
	hfsplus_extent	exts[8];
}


/* Information for a "Fork" in a file */
type hfsplus_fork_raw
assert (? extrec_blks(ext_rec) == total_blocks) as totalsz_recsz

{
	u64 total_size;
	u32 clump_size;
	u32 total_blocks;
	hfsplus_extent_rec ext_rec;
}

type map_rec(int bits) { u1 bmp[bits]; }

type map_node
assert (?desc.desc_type == HFS_NODE_MAP) as mapnode_type
{
	hfs_bnode_desc	desc;
//	map_rec(root_node.header.node_size*8-(20*8))	map;
}

typedef nodeoff_t = u16;

type root_node
assert (? desc.prev == 0) as chk_rootnode_prev
assert (? desc.desc_type == HFS_NODE_HEADER) as chk_rootnode_type
//assert (? this.recoffs[3] == sizeof_bytes(this.desc)) as chk_header_off
{
	hfs_bnode_desc		desc;
	hfs_btree_header_rec	header;
	u8			user_rec[128]; /* reserved */
	/* the size of the map record (in bytes) is nodeSize minus 256 */
	map_rec(8*(header.node_size-256))	map;
	nodeoff_t		recoffs[4];	/* offsets to records */
}

type hfsplus_raw_node(int sz)
{	hfs_bnode_desc	desc;
	/* XXX actually there are a bunch of pointers at the end */
	u8		dat[sz-sizeof_bytes(desc)]; }


type hfsplus_btree
{
	root_node		root;
	set_bytes(0);
	/* so that root node is nodes[0]; this is so nodenum_t's match
	   the indexing for the array */
	hfsplus_raw_node(root.header.node_size)
		nodes[root.header.node_count] fixed;
}

/* HFS+ Volume Header */
type hfsplus_vh
assert (? signature == HFSPLUS_VOLHEAD_SIG || signature == HFSPLUS_VOLHEAD_SIGX)
	as chksig
assert (? version <= HFSPLUS_CURRENT_VERSION) as chkversion
virtual_if(
	? cat_file.total_size > 0,
	hfsplus_btree, i, 1, extrec_blks(cat_file.ext_rec),
	extrec_idx2blk(cat_file.ext_rec, i-1)) as cat_bt
//virtual_if(
//	? alloc_file.total_size > 0,
//	hfsplus_btree, i, 1, 1,
//	disk.blocks[alloc_file.ext_rec.exts[0].start_block]) as alloc_bt
virtual_if(
	? attr_file.total_size > 0,
	hfsplus_btree, i, 1, 1,
	disk.blocks[attr_file.ext_rec.exts[0].start_block]) as attr_bt
virtual_if(
	? ext_file.total_size > 0,
	hfsplus_btree, i, 1, extrec_blks(ext_file.ext_rec),
	extrec_idx2blk(ext_file.ext_rec, i-1)) as ext_bt
{
	u16 signature;
	u16 version;
	u32 attributes;
	u32 last_mount_vers;
	u32 reserved;

	u32 create_date;
	u32 modify_date;
	u32 backup_date;
	u32 checked_date;

	u32 file_count;
	u32 folder_count;

	u32 blocksize;
	u32 total_blocks;
	u32 free_blocks;

	u32 next_alloc;
	u32 rsrc_clump_sz;
	u32 data_clump_sz;
	hfsplus_cnid next_cnid;

	u32 write_count;
	u64 encodings_bmp;

	u32 finder_info[8];

	hfsplus_fork_raw alloc_file;
	hfsplus_fork_raw ext_file;
	hfsplus_fork_raw cat_file;
	hfsplus_fork_raw attr_file;
	hfsplus_fork_raw start_file;
}

/* HFS+ volume attributes */
const HFSPLUS_VOL_UNMNT			= (1 << 8);
const HFSPLUS_VOL_SPARE_BLK		= (1 << 9);
const HFSPLUS_VOL_NOCACHE		= (1 << 10);
const HFSPLUS_VOL_INCNSTNT		= (1 << 11);
const HFSPLUS_VOL_NODEID_REUSED		= (1 << 12);
const HFSPLUS_VOL_JOURNALED		= (1 << 13);
const HFSPLUS_VOL_SOFTLOCK		= (1 << 15);

/* btree key type */
enum btree_key_type_t = {
HFSPLUS_KEY_CASEFOLDING	=0xCF,	/* case-insensitive */
HFSPLUS_KEY_BINARY	=0xBC	/* case-sensitive */
} u8;


typedef nodenum_t = u32;


/* HFS+ BTree header */
type hfs_btree_header_rec
assert (? node_count >= free_nodes) as node_counts
assert (? node_size >= 512) as min_node_size
{
	u16			depth;
	nodenum_t		root;
	u32			leaf_count;
	nodenum_t		leaf_head;
	nodenum_t		leaf_tail;
	u16			node_size;
	u16			max_key_len;
	u32			node_count;
	u32			free_nodes;
	u16			reserved1;
	u32			clump_size;
	u8			btree_type;
	btree_key_type_t	key_type;
	u32			attributes;
	u32			reserved3[16];
}

enum hfs_node_type = {
	HFS_NODE_INDEX	=0x00,
	HFS_NODE_HEADER	=0x01,
	HFS_NODE_MAP	=0x02,
	HFS_NODE_LEAF	=0xFF } s8;


/* HFS+ BTree node descriptor */
type hfs_bnode_desc
assert (? sizeof_bytes(this) == 14) as chksz
/* points_cast(? ...) */
{
	nodenum_t	next;		/* if root node, points to next map node*/
	nodenum_t	prev;
	hfs_node_type	desc_type;
	u8		height;
	u16		num_recs;
	u16		reserved;
}

/* BTree attributes */
const HFS_TREE_BIGKEYS		= 2;
const HFS_TREE_VARIDXKEYS	= 4;

/* HFS+ BTree misc info */
const HFSPLUS_TREE_HEAD =0;
const HFSPLUS_NODE_MXSZ =32768;

/* Some special File ID numbers (stolen from hfs.h) */
const HFSPLUS_POR_CNID		=1;	/* Parent Of the Root */
const HFSPLUS_ROOT_CNID		=2;	/* ROOT directory */
const HFSPLUS_EXT_CNID		=3;	/* EXTents B-tree */
const HFSPLUS_CAT_CNID		=4;	/* CATalog B-tree */
const HFSPLUS_BAD_CNID		=5;	/* BAD blocks file */
const HFSPLUS_ALLOC_CNID	=6;	/* ALLOCation file */
const HFSPLUS_START_CNID	=7;	/* STARTup file */
const HFSPLUS_ATTR_CNID		=8;	/* ATTRibutes file */
const HFSPLUS_EXCH_CNID		=15;	/* ExchangeFiles temp id */
const HFSPLUS_FIRSTUSER_CNID	=16;	/* first available user id */

/* Structs from hfs.h */
type hfsp_point {
	u16 v;
	u16 h;
}

type hfsp_rect {
	u16 top;
	u16 left;
	u16 bottom;
	u16 right;
}


/* HFS directory info (stolen from hfs.h */
type DInfo {
	hfsp_rect frRect;
	u16 frFlags;
	hfsp_point frLocation;
	u16 frView;
}

type DXInfo {
	hfsp_point frScroll;
	u32 frOpenChain;
	u16 frUnused;
	u16 frComment;
	u32 frPutAway;
}

/* HFS file info (stolen from hfs.h) */
type FInfo {
	u32 fdType;
	u32 fdCreator;
	u16 fdFlags;
	hfsp_point fdLocation;
	u16 fdFldr;
}

type FXInfo {
	u16 fdIconID;
	u8 fdUnused[8];
	u16 fdComment;
	u32 fdPutAway;
}

/* File attribute bits */
const HFSPLUS_FILE_LOCKED		= 0x0001;
const HFSPLUS_FILE_THREAD_EXISTS	= 0x0002;
const HFSPLUS_XATTR_EXISTS		= 0x0004;
const HFSPLUS_ACL_EXISTS		= 0x0008;

const HFSPLUS_MIN_THREAD_SZ = 10;

/* HFS+ catalog entry key */
type hfsplus_cat_key {
	u16		key_len;
	hfsplus_cnid	parent;
	hfsplus_unistr	name;
}

const HFSPLUS_CAT_KEYLEN	= sizeof_bytes(hfsplus_cat_key);

/* HFS+ catalog entry type */
enum cat_ent_type_t = {
HFSPLUS_FOLDER		=0x0001,
HFSPLUS_FILE		=0x0002,
HFSPLUS_FOLDER_THREAD	=0x0003,
HFSPLUS_FILE_THREAD	=0x0004} u16;

/* A data record in the catalog tree */
type hfsplus_cat_entry {
	cat_ent_type_t	ce_type;
	if (ce_type == HFSPLUS_FOLDER) {
		hfsplus_cat_folder	folder;
	} else if (ce_type == HFSPLUS_FILE) {
		hfsplus_cat_file	file;
	} else {
		hfsplus_cat_thread	thread;
	}
}

/* HFS+ catalog thread (part of a cat_entry) */
type hfsplus_cat_thread {
	s16 reserved;
	hfsplus_cnid parentID;
	hfsplus_unistr nodeName;
}

/* HFS+ folder data (part of an hfsplus_cat_entry) */
type hfsplus_cat_folder {
	u16 flags;
	u32 valence;
	hfsplus_cnid id;
	u32 create_date;
	u32 content_mod_date;
	u32 attribute_mod_date;
	u32 access_date;
	u32 backup_date;
	hfsplus_perm permissions;
	DInfo user_info;
	DXInfo finder_info;
	u32 text_encoding;
	u32 reserved;
}


/* HFS+ file data (part of a cat_entry) */
type hfsplus_cat_file {
	u16 flags;
	u32 reserved1;
	hfsplus_cnid id;
	u32 create_date;
	u32 content_mod_date;
	u32 attribute_mod_date;
	u32 access_date;
	u32 backup_date;
	hfsplus_perm permissions;
	FInfo user_info;
	FXInfo finder_info;
	u32 text_encoding;
	u32 reserved2;

	hfsplus_fork_raw data_fork;
	hfsplus_fork_raw rsrc_fork;
}


/* HFS+ extents tree key */
type hfsplus_ext_key {
	u16 key_len;
	u8 fork_type;
	u8 pad;
	hfsplus_cnid cnid;
	u32 start_block;
}

const HFSPLUS_EXT_KEYLEN	= sizeof_bytes(hfsplus_ext_key);

//const HFSPLUS_XATTR_FINDER_INFO_NAME "com.apple.FinderInfo"
//const HFSPLUS_XATTR_ACL_NAME "com.apple.system.Security"

const HFSPLUS_ATTR_INLINE_DATA	=0x10;
const HFSPLUS_ATTR_FORK_DATA	=0x20;
const HFSPLUS_ATTR_EXTENTS	=0x30;

/* HFS+ attributes tree key */
type hfsplus_attr_key {
	u16 key_len;
	u16 pad;
	hfsplus_cnid cnid;
	u32 start_block;
	hfsplus_attr_unistr key_name;
}

const HFSPLUS_ATTR_KEYLEN	= sizeof_bytes(hfsplus_attr_key);

/* HFS+ fork data attribute */
type hfsplus_attr_fork_data {
	u32 record_type;
	u32 reserved;
	hfsplus_fork_raw the_fork;
}

/* HFS+ extension attribute */
type hfsplus_attr_extents {
	u32 record_type;
	u32 reserved;
	hfsplus_extent extents;
}

const HFSPLUS_MAX_INLINE_DATA_SIZE =3802;

/* HFS+ attribute inline data */
type hfsplus_attr_inline_data {
	u32 record_type;
	u32 reserved1;
	u8 reserved2[6];
	u16 length;
	u8 raw_bytes[HFSPLUS_MAX_INLINE_DATA_SIZE];
}

/* A data record in the attributes tree */
type hfsplus_attr_entry {
	union {
		u32 record_type;
		hfsplus_attr_fork_data fork_data;
		hfsplus_attr_extents extents;
		hfsplus_attr_inline_data inline_data;
	} dat;
}

/* HFS+ generic BTree key */
type hfsplus_btree_key
{
	u16 key_len;
	union {
		hfsplus_cat_key cat;
		hfsplus_ext_key ext;
		hfsplus_attr_key attr;
	} dat;
}

type hfsplus_block { u8 dat[get_block_size()]; }

type disk
{
	skip_bytes(1024); /* reserved */

	hfsplus_vh	vol_hdr;

	set_bytes(0);
	hfsplus_block	blocks[get_total_blocks()] fixed nofollow;
}
