const __FSL_FSNAME = ext2;
const EXT2_NDIR_BLOCKS = 12;
const EXT2_GOOD_OLD_INODE_SIZE = 128;
const EXT2_INO_BAD = 1;
const EXT2_INO_ROOT = 2;
const EXT2_INO_LOADER = 5;
const EXT2_INO_FIRST = 11;

const S_IFDIR = 0x4000;
const S_IFREG = 0x8000;

include "ext2_func.fsl"
include "ext2_type.fsl"

typedef blknum_t = u32;

/* put block in ino */
write block_relink(ext2_inode ino, int file_off, blknum_t blknum)
{
	ino.i_block_direct[file_off/get_block_size()] <- blknum ?
		(file_off/get_block_size() < num_direct_blocks(ino)) !
	ext2_indir_lookup(ino.i_block_indir).blk_ptr[blknum-EXT2_NDIR_BLOCKS] <- blknum ?
		(file_off/get_block_size() >= EXT2_NDIR_BLOCKS &&
		 file_off/get_block_size() < blocks_per_indir() + EXT2_NDIR_BLOCKS) !
	ext2_indir_in_bi_lookup(ino, file_off/get_block_size()).blk_ptr[
		biindir_indir_offset(file_off/get_block_size())] <- blknum ?
		(file_off/get_block_size() >= blocks_per_indir() + EXT2_NDIR_BLOCKS &&
		 file_off/get_block_size() < (blocks_per_indir()*blocks_per_indir() +
			 EXT2_NDIR_BLOCKS+blocks_per_indir()) ) !
}

/* allocate block from bmp */
write block_alloc(blknum_t blknum)
{
	get_group_bmp(blknum_to_grp(blknum)).data[blknum_to_bmpidx(blknum)] <- 0 !
}

/* put block back in bmp */
write block_replace(blknum_t blknum)
{
	get_group_bmp(blknum_to_grp(blknum)).data[blknum_to_bmpidx(blknum)] <- 1 !
}
