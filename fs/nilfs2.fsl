/**
 * XXX TODO
 * 1. support direct and btree bmaps
 * 2. support files
 * ...
 */
const __FSL_FSNAME = nilfs2;
const NILFS_SECRM_FL		= 0x00000001; /* Secure deletion */
const NILFS_UNRM_FL		= 0x00000002; /* Undelete */
const NILFS_SYNC_FL		= 0x00000008; /* Synchronous updates */
const NILFS_IMMUTABLE_FL	= 0x00000010; /* Immutable file */
const NILFS_APPEND_FL		= 0x00000020; /* writes to file may only append */
const NILFS_NODUMP_FL		= 0x00000040; /* do not dump file */
const NILFS_NOATIME_FL		= 0x00000080; /* do not update atime */
/* Reserved for compression usage... */
const NILFS_NOTAIL_FL		= 0x00008000; /* file tail should not be merged */
const NILFS_DIRSYNC_FL		= 0x00010000; /* dirsync behaviour */
const NILFS_FL_USER_VISIBLE	= 0x0003DFFF; /* User visible flags */
const NILFS_FL_USER_MODIFIABLE	= 0x000380FF; /* User modifiable flags */

const NILFS_NAME_LEN		= 255;

const NILFS_INODE_BMAP_SIZE = 7;

const NILFS_OS_LINUX = 0;

const NILFS_CURRENT_REV	= 2;	/* current major revision */
const NILFS_MINOR_REV = 0;	/* minor revision */


const NILFS_INO_ROOT	= 2;	/* Root file inode */
const NILFS_INO_DAT 	= 3;	/* DAT file */
const NILFS_INO_CPFILE	= 4;	/* checkpoint file */
const NILFS_INO_SUFILE	= 5;	/* segment usage file */
const NILFS_INO_IFILE	= 6;	/* ifile */
const NILFS_INO_ATIME	= 7;	/* Atime file (reserved) */
const NILFS_INO_XATTR	= 8;	/* Xattribute file (reserved) */
const NILFS_INO_SKETCH	= 10;	/* Sketch file */
const NILFS_INO_USER	= 11;	/* Fisrt user's file inode number */

const NILFS_SB_OFFSET_BYTES	= 1024; /* byte offset of nilfs superblock */
const NILFS_SUPER_MAGIC		= 0x3434; /* NILFS filesystem  magic number */
const NILFS_MAX_SB_SIZE		= 1024;
const NILFS_SEG_MIN_BLOCKS	= 16;	/* Minimum number of blocks in
					   a full segment */
const NILFS_PSEG_MIN_BLOCKS	= 2;	/* Minimum number of blocks in
					   a partial segment */
const NILFS_MIN_NRSVSEGS	= 8;	/* Minimum number of reserved
					   segments */

/* btree flags */
const NILFS_BTREE_NODE_ROOT = 0x01;
const NILFS_BTREE_LEVEL_DATA = 0;
const NILFS_BTREE_LEVEL_NODE_MIN = (NILFS_BTREE_LEVEL_DATA + 1);
const NILFS_BTREE_LEVEL_MAX = 14;

const NILFS_SEGSUM_MAGIC = 0x1eaffa11;
/* flags for the segment summary */
const NILFS_SS_LOGBGN	= (1 << 0);	/* begins a logical segment */
const NILFS_SS_LOGEND	= (1 << 1);	/* ends a logical segment */
const NILFS_SS_SR	= (1 << 2);	/* has super root */
const NILFS_SS_SYNDT	= (1 << 3);	/* includes data only updates */
const NILFS_SS_GC	= (1 << 4);	/* segment written for cleaner op */

/* ... */
typedef blocknum_t = u64;
typedef blockcount_t = u64;
typedef segnum_t = u64;
typedef vblknum_t = u64;
typedef inonum_t = u64;
typedef blkoff_t = u64;
typedef crc32_t = u32;

include "nilfs2_func.fsl"
include "nilfs2_type.fsl"
