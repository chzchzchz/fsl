type uuid_t { u8	uuid[16]; }

type xfs_sb
assert ( ? sb_magicnum == XFS_SUPER_MAGIC ) as chk_sb
assert ( ? sb_blocksize / sb_inopblock >= sb_inodesize) as chk_inopblock
assert ( ? (get_numblks()*sb_blocksize) <= __FROM_OS_BDEV_BYTES) as chk_size
{
	u32		sb_magicnum;	/* magic number == XFS_SB_MAGIC */
	u32		sb_blocksize;	/* logical block size, bytes */
	xfs_drfsbno_t	sb_dblocks;	/* number of data blocks */
	xfs_drfsbno_t	sb_rblocks;	/* number of realtime blocks */
	xfs_drtbno_t	sb_rextents;	/* number of realtime extents */
	uuid_t		sb_uuid;	/* file system unique id */
	xfs_drfsbno_t	sb_logstart;	/* starting block of log if internal */
	xfs_ino_t	sb_rootino;	/* root inode number */
	xfs_ino_t	sb_rbmino;	/* bitmap inode for realtime extents */
	xfs_ino_t	sb_rsumino;	/* summary inode for rt bitmap */
	xfs_agblock_t	sb_rextsize;	/* realtime extent size, blocks */
	xfs_agblock_t	sb_agblocks;	/* size of an allocation group */
	xfs_agnumber_t	sb_agcount;	/* number of allocation groups */
	xfs_extlen_t	sb_rbmblocks;	/* number of rt bitmap blocks */
	xfs_extlen_t	sb_logblocks;	/* number of log blocks */
	u16		sb_versionnum;	/* header version == XFS_SB_VERSION */
	u16		sb_sectsize;	/* volume sector size, bytes */
	u16		sb_inodesize;	/* inode size, bytes */
	u16		sb_inopblock;	/* inodes per block */
	char		sb_fname[12];	/* file system name */
	u8		sb_blocklog;	/* log2 of sb_blocksize */
	u8		sb_sectlog;	/* log2 of sb_sectsize */
	u8		sb_inodelog;	/* log2 of sb_inodesize */
	u8		sb_inopblog;	/* log2 of sb_inopblock */
	u8		sb_agblklog;	/* log2 of sb_agblocks (rounded up) */
	u8		sb_rextslog;	/* log2 of sb_rextents */
	u8		sb_inprogress;	/* mkfs is in progress, don't mount */
	u8		sb_imax_pct;	/* max % of fs for inode space */
	/* statistics */
	/*
	* These fields must remain contiguous.	If you really
	* want to change their layout, make sure you fix the
	* code in xfs_trans_apply_sb_deltas().
	*/
	u64		sb_icount;		/* allocated inodes */
	u64		sb_ifree;		/* free inodes */
	u64		sb_fdblocks;	/* free data blocks */
	u64		sb_frextents;	/* free realtime extents */
	/*
	* End contiguous fields.
	*/
	xfs_ino_t	sb_uquotino;	/* user quota inode */
	xfs_ino_t	sb_gquotino;	/* group quota inode */
	u16		sb_qflags;		/* quota flags */
	u8		sb_flags;		/* misc. flags */
	u8		sb_shared_vn;	/* shared version number */
	xfs_extlen_t	sb_inoalignmt;	/* inode chunk alignment, fsblocks */
	u32		sb_unit;		/* stripe or raid unit */
	u32		sb_width;		/* stripe or raid width */
	u8		sb_dirblklog;	/* log2 of dir block size (fsbs) */
	u8		sb_logsectlog;	/* log2 of the log sector size */
	u16		sb_logsectsize; /* sector size for the log, bytes */
	u32		sb_logsunit;	/* stripe unit size for the log */
	u32		sb_features2;	/* additional feature bits */
	u32		sb_bad_features2; /* unusable space */
}

type xfs_block { u8 data[get_bsz()]; }

/*
 * The second word of agf_levels in the first a.g. overlaps the EFS
 * superblock's magic number.  Since the magic numbers valid for EFS
 * are > 64k, our value cannot be confused for an EFS superblock's.
 */
type xfs_agf
assert (? agf_magicnum == XFS_AGF_MAGIC) as chk_agf_magic
{
	/*
	* Common allocation group header information
	*/
	u32          agf_magicnum;   /* magic number == XFS_AGF_MAGIC */
	u32          agf_versionnum; /* header version == XFS_AGF_VERSION */
	u32          agf_seqno;      /* sequence # starting from 0 */
	u32          agf_length;     /* size in blocks of a.g. */
	/* Freespace information */
	u32          agf_roots[XFS_BTNUM_AGF];       /* root blocks */
	u32          agf_spare0;     /* spare field */
	u32          agf_levels[XFS_BTNUM_AGF];      /* btree levels */
	u32          agf_spare1;     /* spare field */
	u32          agf_flfirst;    /* first freelist block's index */
	u32          agf_fllast;     /* last freelist block's index */
	u32          agf_flcount;    /* count of blocks in freelist */
	u32          agf_freeblks;   /* total free blocks */
	u32          agf_longest;    /* longest free space */
	u32          agf_btreeblks;  /* # of blocks held in AGF btrees */
	set_bytes(get_sectsz());

}

type xfs_agi
assert (? agi_magicnum == XFS_AGI_MAGIC) as chk_agi_magic
{
	/* Common allocation group header information */
	u32          agi_magicnum;   /* magic number == XFS_AGI_MAGIC */
	u32          agi_versionnum; /* header version == XFS_AGI_VERSION */
	u32          agi_seqno;      /* sequence # starting from 0 */
	u32          agi_length;     /* size in blocks of a.g. */
	/*
	* Inode information
	* Inodes are mapped by interpreting the inode number, so no
	* mapping data is needed here.
	*/
	u32          agi_count;      /* count of allocated inodes */
	u32          agi_root;       /* root of inode btree */
	u32          agi_level;      /* levels in inode btree */
	u32          agi_freecount;  /* number of free inodes */
	u32          agi_newino;     /* new inode just allocated */
	u32          agi_dirino;     /* last directory inode chunk */
	/*
	* Hash table of inodes which have been unlinked but are
	* still being referenced.
	*/
	u32          agi_unlinked[XFS_AGI_UNLINKED_BUCKETS];
	set_bytes(get_sectsz());
}

/*
 * The third a.g. block contains the a.g. freelist, an array
 * of block pointers to blocks owned by the allocation btree code.
 */

type xfs_agfl {	xfs_agblock_t   agfl_bno[xfs_agfl_size()]; }

type aggregate
{
	xfs_sb		sb;
	set_bytes(get_sectsz());
	xfs_agf		agf;
	xfs_agi		agi;
	xfs_agfl	agfl;
	set_bytes(0);
	xfs_block	blocks[sb.sb_agblocks] fixed nofollow;
}

type disk
{
	aggregate	aggr[get_agcount()] fixed;
	set_bytes(0);
	xfs_block	blocks[get_numblks()] fixed nofollow;
}