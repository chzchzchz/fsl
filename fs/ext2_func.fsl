u64 assert_nonzero(u64 x) { if (x == 0) return fsl_fail(0); return x; }
int blks_per_grp() { return assert_nonzero(disk.sb.s_blks_per_grp); }
u32 get_ino_sz() { return disk.sb.s_inode_size; }
int blknum_to_grp(blknum_t blknum) { return (blknum-1) / blks_per_grp(); }
int blknum_to_bmpidx(blknum_t blknum) { return (blknum-1) % blks_per_grp(); }

int get_total_blks() { return assert_nonzero(disk.sb.s_blocks_c); }
int get_block_size() { return assert_nonzero(1024 << disk.sb.s_log_block_sz); }
int inos_per_grp() { return disk.sb.s_inos_per_grp; }

int get_group_count()
{
	ext2_sb	sb = disk.sb;
	return assert_nonzero(
		1+(((sb.s_blocks_c-sb.s_first_data_block)-1)/blks_per_grp()));
}

uint blocks_per_indir() { return assert_nonzero(get_block_size()/4); }

int bit_add_offset() { if (get_block_size() > 1024) return 1; return 0; }

int inode_table_block_count()
{
	u32	needed_bytes = sizeof_bytes(ext2_inode)*inos_per_grp();
	return assert_nonzero((needed_bytes+get_block_size()-1)/get_block_size());
}

u32 indir_count(ext2_indir_block id)
{
	u32	max_blks = get_block_size()/4;
	u32	ret = 0;
	u32	i = 0;

	while (i < max_blks) {
		if (id.blk_ptr[i] != 0) ret++;
		i++;
	}
	return ret;
}

bool is_blk_avail(blknum_t blknum)
{
	int		grpnum = blknum_to_grp(blknum);
	int		bmpidx = blknum_to_bmpidx(blknum);
	ext2_bmp_blk	bmpblk;

	bmpblk = get_group_bmp(grpnum);
	if (bmpblk.data[bmpidx] == 0) return true;
	return false;
}

ext2_bmp_blk get_group_bmp(int grpnum)
{
	blknum_t 	bmp_blknum = disk.grp_desc_table[grpnum].block_bmp;
	return disk.blocks[bmp_blknum].blk_bmp;
}

ext2_group_desc get_group(int grpnum) { return disk.grp_desc_table[grpnum]; }

uint size_to_blocks(u64 i_size)
{
	int	bsz = get_block_size();
	return (i_size + bsz - 1) / bsz;
}

uint num_direct_blocks(ext2_inode ino)
{
	u32	num_blks;

	if (is_fast_symlink(ino)) return 0;

	num_blks = size_to_blocks(ino.i_size);
	if (num_blks > EXT2_NDIR_BLOCKS)
		return EXT2_NDIR_BLOCKS;
	return num_blks;
}

bool is_fast_symlink(ext2_inode ino)
{
	if ((ino.i_mode & 0xa000) == 0xa000) return true;
	return false;
}

ext2_indir_block ext2_indir_lookup(blknum_t block_num)
{
	return disk.blocks[block_num].indir_blk;
}

ext2_biindir_block ext2_biindir_lookup(blknum_t block_num)
{
	return disk.blocks[block_num].biindir_blk;
}

ext2_triindir_block ext2_triindir_lookup(blknum_t block_num)
{
	return disk.blocks[block_num].triindir_blk;
}

ext2_data_block ext2_data_block_lookup(blknum_t block_num)
{
	return disk.blocks[block_num].data_blk;
}

blknum_t ext2_indir_in_bi_lookupblk(ext2_inode ino, uint n)
{
	ext2_indir_block	indir_blk;
	ext2_biindir_block	biindir_blk;
	u32			indir_blknum;
	u32			biindir_blknum;
	u32			biindir_indir_offset;

	biindir_blknum = ino.i_block_biindir;
	biindir_indir_offset = (n - (EXT2_NDIR_BLOCKS + blocks_per_indir()));
	biindir_indir_offset /= blocks_per_indir();

	biindir_blk = ext2_biindir_lookup(biindir_blknum);
	indir_blknum = biindir_blk.blk_ptr[biindir_indir_offset];
	return indir_blknum;
}

ext2_indir_block ext2_indir_in_bi_lookup(ext2_inode ino, uint n)
{
	blknum_t		indir_blknum;
	indir_blknum = ext2_indir_in_bi_lookupblk(ino, n);
	return ext2_indir_lookup(indir_blknum);

}

u32 biindir_indir_offset(uint n)
{
	u32	indir_offset;
	u32	bpi;
	bpi = blocks_per_indir();
	indir_offset = (n - (EXT2_NDIR_BLOCKS + bpi));
	indir_offset %= bpi;
	return indir_offset;
}

/* 0 indexed */
blknum_t get_nth_blknum(ext2_inode ino, uint n)
{
	blknum_t block_num;

	if (n < EXT2_NDIR_BLOCKS) {
		block_num = ino.i_block_direct[n];
	} else if (n < EXT2_NDIR_BLOCKS+blocks_per_indir()) {
		ext2_indir_block	indir_blk;

		indir_blk = ext2_indir_lookup(ino.i_block_indir);
		block_num = indir_blk.blk_ptr[n-EXT2_NDIR_BLOCKS];
	} else if (n <
		(blocks_per_indir()*blocks_per_indir() +
			EXT2_NDIR_BLOCKS+blocks_per_indir()))
	{
		ext2_indir_block	indir_blk;
		indir_blk = ext2_indir_in_bi_lookup(ino, n);
		block_num = indir_blk.blk_ptr[biindir_indir_offset(n)];
	} else {
		/* XXX do later */
		block_num=999999999999;
		DEBUG_WRITE=666;
	}

	return block_num;
}

ext2_data_block get_nth(ext2_inode ino, uint n)
{
	blknum_t	blknum;
	blknum = get_nth_blknum(ino, n);
	return ext2_data_block_lookup(blknum);
}

/* count number of metablocks necessary for a given size */
uint size_to_metablocks(uint sz)
{
	int	ret;
	int	num_blocks;
	u32	per_indir;

	num_blocks = size_to_blocks(sz);
	if (num_blocks <= EXT2_NDIR_BLOCKS) return 0;

	ret = 1;	/* indir block */
	num_blocks -= EXT2_NDIR_BLOCKS;
	per_indir = blocks_per_indir();
	if (num_blocks < per_indir) return ret;

	/* filled out indir, now on to biinidr */
	num_blocks -= per_indir;

	ret++;	/* biindir block */
	if (num_blocks < per_indir*per_indir) {
		ret += (num_blocks / per_indir)+1;
		return ret;
	}
	ret += per_indir;
	num_blocks -= blocks_per_indir();
	DEBUG_WRITE = 99999999; /* oh, brother! */
	return 99999999999;
}

bool is_fmeta_meta(uint n)
{
	u32	bpi;

	if (n < EXT2_NDIR_BLOCKS) return false;
	if (n == EXT2_NDIR_BLOCKS) return true;	/* indir */

	n -= EXT2_NDIR_BLOCKS + 1;
	bpi = blocks_per_indir();
	if (n < bpi) return false;
	if (n == bpi) return true;	/* biindir */

	n -= bpi + 1;
	if (n > (bpi*bpi + bpi)) {
		DEBUG_WRITE = 33333333333;
		return false;
	}

	if ((n % (bpi+1)) == 0) return true;
	return false;
}

u32 fmeta_to_fblk(uint n)
{
	u32	bpi;

	if (is_fmeta_meta(n)) {
		DEBUG_WRITE=444444444;
		return 99999999999;
	}

	if (n < EXT2_NDIR_BLOCKS) return n;
	n--;
	bpi = blocks_per_indir();
	if (n < bpi) return n;
	n -= bpi+1;
	if (n > (bpi*bpi + bpi)) {
		DEBUG_WRITE = 12121212122;
		return 999999999999;
	}
	return n - ((n / bpi)+1);
}

/* 0 indexed */
blknum_t get_nth_meta_blknum(ext2_inode ino, uint n)
{
	u32	blks_left;
	u32	per_indir;
	u32	indir_num;
	u32	indir_off;

	blks_left = n;
	if (blks_left < EXT2_NDIR_BLOCKS) return get_nth_blknum(ino, n);
	blks_left -= EXT2_NDIR_BLOCKS;
	if (blks_left == 0) return ino.i_block_indir;

	/* remove indirect block in 'n' count */
	n--;
	blks_left--;

	per_indir = blocks_per_indir();
	if (blks_left < per_indir) return get_nth_blknum(ino, n);
	blks_left -= per_indir;

	if (blks_left == 0) return ino.i_block_biindir;

	/* remove biindir block */
	n--;
	blks_left--;

	/* triindir? */
	if (blks_left >= per_indir+per_indir*per_indir) {
		DEBUG_WRITE = 6666666666666;
		DEBUG_WRITE = blks_left;
		return 99999999999999;
	}

	indir_num = blks_left / per_indir;
	indir_off = blks_left % per_indir;

	n -= indir_num + 1;
	if (indir_off == 0) {
		/* indir blk */
		return  ext2_indir_in_bi_lookupblk(ino, n);
	}

	return get_nth_blknum(ino, n);
}

ext2_data_block get_nth_meta(ext2_inode ino, uint n)
{
	blknum_t	blknum;
	blknum = get_nth_meta_blknum(ino, n);
	return ext2_data_block_lookup(blknum);
}

ext2_inode get_inode(uint ino_num_logical)
{
	int	ino_num= ino_num_logical - 1;
	int	grp_idx = ino_num / inos_per_grp();
	int	ino_tab_idx = ino_num % inos_per_grp();
	int	ino_tab_off = ino_tab_idx/(get_block_size()/get_ino_sz());
	int	ino_idx = ino_tab_idx % (get_block_size()/get_ino_sz());
	int	table_blk = disk.grp_desc_table[grp_idx].inode_table;
	int	blk_num = (table_blk + ino_tab_off);
	return disk.blocks[blk_num].ino_blk.ino[ino_idx];
}

u32 bi_count(ext2_biindir_block id)
{
	u32	max_blks = get_block_size()/4;
	u32	ret = 0;
	u32	i = 0;

	while (i < max_blks) {
		if (id.blk_ptr[i] != 0) ret++;
		i++;
	}
	return ret;
}

u32 tri_count(ext2_triindir_block id)
{
	u32	max_blks = get_block_size()/4;
	u32	ret = 0;
	u32	i = 0;

	while (i < max_blks) {
		if (id.blk_ptr[i] != 0) ret++;
		i++;
	}
	return ret;
}

int bn2bmpidx(blknum_t bn) { return bn + bit_add_offset(); }
