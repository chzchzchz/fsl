u32 indir_count(ext2_indir_block id)
{
	u32	max_blks;
	u32	ret;
	u32	i;

	ret = 0;
	i = 0;
	max_blks = get_block_size()/4;
	while (i < max_blks) {
		if (id.blk_ptr[i] != 0)
			ret++;
		i++;
	}
	return ret;
}

int get_block_size()
{
	return (1024 << ext2_sb.s_log_block_sz);
}

int get_group_count(ext2_sb sb)
{
	return 1+(((sb.s_blocks_c-sb.s_first_data_block)-1)/sb.s_blks_per_grp);
}

int blocks_off(ext2_sb sb)
{
	int	group_bytes;
	int	group_blocks;
	int	blk_sz;

	blk_sz = get_block_size();
	group_bytes = get_group_count(sb)*sizeof_bytes(ext2_group_desc);
	group_blocks = (group_bytes+blk_sz)/blk_sz;

	return 1 + sb.s_first_data_block + group_blocks;
}

int inode_table_block_count(ext2_sb sb)
{
	u32	needed_bytes;
	needed_bytes = sizeof_bytes(ext2_inode)*sb.s_inos_per_grp;
	return (needed_bytes+get_block_size()-1)/get_block_size();
}

ext2_inode ino_by_num(u32 ino_num)
{
	int	ino_grp;
	int	ino_grp_idx;
	int	ino_grp_blk;
	int	ino_grp_blk_idx;
	int	table_base;
	int	blk_sz;

	blk_sz = get_block_size();
	ino_grp = ino_num / ext2_sb.s_inos_per_grp;
	ino_grp_idx = ino_num % disk.sb.s_inos_per_grp;
	ino_grp_blk = (ino_grp_idx * sizeof_bytes(ext2_inode)) / blk_sz;
	ino_grp_blk_idx = (ino_grp_idx*(sizeof_bytes(ext2_inode))) % blk_sz;

	table_base = disk.grp_desc_table[ino_grp].inode_table;
	return disk.blocks[
		table_base + ino_grp_blk - blocks_off(ext2_sb)].ino_blk.ino[
			ino_grp_blk_idx];
}

uint size_to_blocks(u64 i_size)
{
	int	bsz;
	bsz = get_block_size();
	return (i_size + bsz - 1) / bsz;
}

uint num_direct_blocks(ext2_inode ino)
{
	u32	num_blks;

	if (is_fast_symlink(ino)) return 0;

	num_blks = size_to_blocks(ino.i_size);
	if (num_blks > EXT2_NDIR_BLOCKS)
		return EXT2_NDIR_BLOCKS;
	return num_blks;
}

uint blocks_per_indir()
{
	return get_block_size()/4;
}

bool is_fast_symlink(ext2_inode ino)
{
	if ((ino.i_mode & 0xa000) == 0xa000)
		return true;
	return false;
}

ext2_indir_block ext2_indir_lookup(uint block_num)
{
	return disk.blocks[block_num - blocks_off(disk.sb)].indir_blk;
}

ext2_biindir_block ext2_biindir_lookup(uint block_num)
{
	return disk.blocks[block_num - blocks_off(disk.sb)].biindir_blk;
}

ext2_triindir_block ext2_triindir_lookup(uint block_num)
{
	return disk.blocks[block_num - blocks_off(disk.sb)].triindir_blk;
}

ext2_data_block ext2_data_block_lookup(uint block_num)
{
	return disk.blocks[block_num - blocks_off(disk.sb)].data_blk;
}

ext2_data_block get_nth(uint n)
{
	u32	block_num;

	if (n < EXT2_NDIR_BLOCKS) {
		block_num = ext2_inode.i_block_direct[n];

	} else if (n < EXT2_NDIR_BLOCKS+blocks_per_indir()) {
		ext2_indir_block	indir_blk;

		indir_blk = ext2_indir_lookup(ext2_inode.i_block_indir);
		block_num = indir_blk.blk_ptr[n-EXT2_NDIR_BLOCKS];
	} else if (n <
		(blocks_per_indir()*blocks_per_indir() +
			EXT2_NDIR_BLOCKS+blocks_per_indir()))
	{
		ext2_indir_block	indir_blk;
		ext2_biindir_block	biindir_blk;
		u32			indir_blknum;
		u32			biindir_blknum;
		u32			biindir_indir_offset;
		u32			indir_offset;

		biindir_blknum = ext2_inode.i_block_biindir;
		biindir_indir_offset = (n - (EXT2_NDIR_BLOCKS + blocks_per_indir()));
		biindir_indir_offset /= blocks_per_indir();

		biindir_blk = ext2_biindir_lookup(biindir_blknum);
		indir_blknum = biindir_blk.blk_ptr[biindir_indir_offset];

		indir_offset = (n - (EXT2_NDIR_BLOCKS + blocks_per_indir()));
		indir_offset %= blocks_per_indir();

		indir_blk = ext2_indir_lookup(indir_blknum);
		block_num = indir_blk.blk_ptr[indir_offset];
	} else {
		/* XXX do later */
		block_num=999999999999;
		DEBUG_WRITE=666;
	}

	/* got our blocknummmm */
	return ext2_data_block_lookup(block_num);
}

ext2_inode get_inode(uint ino_num_logical)
{
	int	ino_num;
	int	grp_idx;
	int	ino_tab_idx;
	int	ino_tab_off;
	int	ino_idx;
	int	table_blk;
	int	blk_num;

	ino_num = ino_num_logical - 1;
	grp_idx = ino_num / ext2_sb.s_inos_per_grp;
	ino_tab_idx = ino_num % ext2_sb.s_inos_per_grp;
	ino_tab_off = ino_tab_idx / (get_block_size()/EXT2_GOOD_OLD_INODE_SIZE);
	ino_idx = ino_tab_idx % (get_block_size()/EXT2_GOOD_OLD_INODE_SIZE);
	table_blk = disk.grp_desc_table[grp_idx].inode_table;

	blk_num = (table_blk + ino_tab_off) - blocks_off(disk.sb);
	return disk.blocks[blk_num].ino_blk.ino[ino_idx];
}

bool S_ISDIR(u32 mode)
{
	if ((mode & S_IFDIR) == S_IFDIR) return true;
	return false;
}

bool S_ISREG(u32 mode)
{
	if ((mode & S_IFREG) == S_IFREG) return true;
	return false;
}
