u32 indir_count(ext2_indir_block id)
{
	u32	max_blks;
	u32	ret;
	u32	i;

	ret = 0;
	i = 0;
	max_blks = get_block_size()/4;
	while (i < max_blks) {
		if (id.blk_ptr[i] != 0)
			ret++;
		i++;
	}
	return ret;
}

bool is_blk_avail(blknum_t blknum)
{
	int		grpnum;
	int		bmpidx;
	ext2_bmp_blk	bmpblk;

	grpnum = blknum_to_grp(blknum);
	bmpidx = blknum_to_bmpidx(blknum);
	bmpblk = get_group_bmp(grpnum);
	if (bmpblk.data[bmpidx] == 0) return true;
	return false;
}

int blknum_to_grp(blknum_t blknum) { return blknum / ext2_sb.s_blks_per_grp; }
int blknum_to_bmpidx(blknum_t blknum) { return blknum % ext2_sb.s_blks_per_grp; }

int get_total_blks()
{
	return disk.sb.s_blocks_c;
}

int get_block_size()
{
	return (1024 << ext2_sb.s_log_block_sz);
}

int get_group_count(ext2_sb sb)
{
	return 1+(((sb.s_blocks_c-sb.s_first_data_block)-1)/sb.s_blks_per_grp);
}

ext2_bmp_blk get_group_bmp(int grpnum)
{
	blknum_t bmp_blknum;
	bmp_blknum = disk.grp_desc_table[grpnum].block_bmp-blocks_off(ext2_sb);
	return disk.blocks[bmp_blknum].blk_bmp;
}

ext2_group_desc get_group(int grpnum) { return disk.grp_desc_table[grpnum]; }

int blocks_off(ext2_sb sb)
{
	int	group_bytes;
	int	group_blocks;
	int	blk_sz;

	blk_sz = get_block_size();
	group_bytes = get_group_count(sb)*sizeof_bytes(ext2_group_desc);
	group_blocks = (group_bytes+blk_sz)/blk_sz;

	return 1 + sb.s_first_data_block + group_blocks;
}

int inode_table_block_count(ext2_sb sb)
{
	u32	needed_bytes;
	needed_bytes = sizeof_bytes(ext2_inode)*sb.s_inos_per_grp;
	return (needed_bytes+get_block_size()-1)/get_block_size();
}

ext2_inode ino_by_num(u32 ino_num)
{
	int	ino_grp;
	int	ino_grp_idx;
	int	ino_grp_blk;
	int	ino_grp_blk_idx;
	int	table_base;
	int	blk_sz;

	blk_sz = get_block_size();
	ino_grp = ino_num / ext2_sb.s_inos_per_grp;
	ino_grp_idx = ino_num % disk.sb.s_inos_per_grp;
	ino_grp_blk = (ino_grp_idx * sizeof_bytes(ext2_inode)) / blk_sz;
	ino_grp_blk_idx = (ino_grp_idx*(sizeof_bytes(ext2_inode))) % blk_sz;

	table_base = disk.grp_desc_table[ino_grp].inode_table;
	return disk.blocks[
		table_base + ino_grp_blk - blocks_off(ext2_sb)].ino_blk.ino[
			ino_grp_blk_idx];
}

uint size_to_blocks(u64 i_size)
{
	int	bsz;
	bsz = get_block_size();
	return (i_size + bsz - 1) / bsz;
}

uint num_direct_blocks(ext2_inode ino)
{
	u32	num_blks;

	if (is_fast_symlink(ino)) return 0;

	num_blks = size_to_blocks(ino.i_size);
	if (num_blks > EXT2_NDIR_BLOCKS)
		return EXT2_NDIR_BLOCKS;
	return num_blks;
}

uint blocks_per_indir()
{
	return get_block_size()/4;
}

bool is_fast_symlink(ext2_inode ino)
{
	if ((ino.i_mode & 0xa000) == 0xa000)
		return true;
	return false;
}

ext2_indir_block ext2_indir_lookup(blknum_t block_num)
{
	return disk.blocks[block_num - blocks_off(disk.sb)].indir_blk;
}

ext2_biindir_block ext2_biindir_lookup(blknum_t block_num)
{
	return disk.blocks[block_num - blocks_off(disk.sb)].biindir_blk;
}

ext2_triindir_block ext2_triindir_lookup(blknum_t block_num)
{
	return disk.blocks[block_num - blocks_off(disk.sb)].triindir_blk;
}

ext2_data_block ext2_data_block_lookup(blknum_t block_num)
{
	return disk.blocks[block_num - blocks_off(disk.sb)].data_blk;
}

blknum_t ext2_indir_in_bi_lookupblk(ext2_inode ino, uint n)
{
	ext2_indir_block	indir_blk;
	ext2_biindir_block	biindir_blk;
	u32			indir_blknum;
	u32			biindir_blknum;
	u32			biindir_indir_offset;

	biindir_blknum = ino.i_block_biindir;
	biindir_indir_offset = (n - (EXT2_NDIR_BLOCKS + blocks_per_indir()));
	biindir_indir_offset /= blocks_per_indir();

	biindir_blk = ext2_biindir_lookup(biindir_blknum);
	indir_blknum = biindir_blk.blk_ptr[biindir_indir_offset];
	return indir_blknum;
}

ext2_indir_block ext2_indir_in_bi_lookup(ext2_inode ino, uint n)
{
	blknum_t		indir_blknum;
	indir_blknum = ext2_indir_in_bi_lookupblk(ino, n);
	return ext2_indir_lookup(indir_blknum);

}

u32 biindir_indir_offset(uint n)
{
	u32	indir_offset;
	u32	bpi;
	bpi = blocks_per_indir();
	indir_offset = (n - (EXT2_NDIR_BLOCKS + bpi));
	indir_offset %= bpi;
	return indir_offset;
}

/* 0 indexed */
blknum_t get_nth_blknum(ext2_inode ino, uint n)
{
	blknum_t block_num;

	if (n < EXT2_NDIR_BLOCKS) {
		block_num = ino.i_block_direct[n];
	} else if (n < EXT2_NDIR_BLOCKS+blocks_per_indir()) {
		ext2_indir_block	indir_blk;

		indir_blk = ext2_indir_lookup(ino.i_block_indir);
		block_num = indir_blk.blk_ptr[n-EXT2_NDIR_BLOCKS];
	} else if (n <
		(blocks_per_indir()*blocks_per_indir() +
			EXT2_NDIR_BLOCKS+blocks_per_indir()))
	{
		ext2_indir_block	indir_blk;
		indir_blk = ext2_indir_in_bi_lookup(ino, n);
		block_num = indir_blk.blk_ptr[biindir_indir_offset(n)];
	} else {
		/* XXX do later */
		block_num=999999999999;
		DEBUG_WRITE=666;
	}

	return block_num;
}

ext2_data_block get_nth(ext2_inode ino, uint n)
{
	blknum_t	blknum;
	blknum = get_nth_blknum(ino, n);
	return ext2_data_block_lookup(blknum);
}

/* count number of metablocks necessary for a given size */
uint size_to_metablocks(uint sz)
{
	int	ret;
	int	num_blocks;
	u32	per_indir;

	num_blocks = size_to_blocks(sz);
	if (num_blocks < EXT2_NDIR_BLOCKS) return 0;

	ret = 1;	/* indir block */
	num_blocks -= EXT2_NDIR_BLOCKS;
	per_indir = blocks_per_indir();
	if (num_blocks < per_indir) return ret;

	/* filled out indir, now on to biinidr */
	num_blocks -= per_indir;

	ret++;	/* biindir block */
	if (num_blocks < per_indir*per_indir) {
		ret += (num_blocks / per_indir)+1;
		return ret;
	}
	ret += per_indir;
	num_blocks -= blocks_per_indir();
	DEBUG_WRITE = 99999999; /* oh, brother! */
	return 99999999999;
}

bool is_fmeta_meta(uint n)
{
	u32	bpi;

	if (n < EXT2_NDIR_BLOCKS) return false;
	if (n == EXT2_NDIR_BLOCKS) return true;	/* indir */

	n -= EXT2_NDIR_BLOCKS + 1;
	bpi = blocks_per_indir();
	if (n < bpi) return false;
	if (n == bpi) return true;	/* biindir */

	n -= bpi + 1;
	if (n > (bpi*bpi + bpi)) {
		DEBUG_WRITE = 33333333333;
		return false;
	}

	if ((n % (bpi+1)) == 0) return true;
	return false;
}

u32 fmeta_to_fblk(uint n)
{
	u32	bpi;

	if (is_fmeta_meta(n)) {
		DEBUG_WRITE=444444444;
		return 99999999999;
	}

	if (n < EXT2_NDIR_BLOCKS) return n;
	n--;
	bpi = blocks_per_indir();
	if (n < bpi) return n;
	n -= bpi+1;
	if (n > (bpi*bpi + bpi)) {
		DEBUG_WRITE = 12121212122;
		return 999999999999;
	}
	return n - ((n / bpi)+1);
}

/* 0 indexed */
blknum_t get_nth_meta_blknum(ext2_inode ino, uint n)
{
	u32	blks_left;
	u32	per_indir;
	u32	indir_num;
	u32	indir_off;

	blks_left = n;
	if (blks_left < EXT2_NDIR_BLOCKS) return get_nth_blknum(ino, n);
	blks_left -= EXT2_NDIR_BLOCKS;
	if (blks_left == 0) return ino.i_block_indir;

	/* remove indirect block in 'n' count */
	n--;
	blks_left--;

	per_indir = blocks_per_indir();
	if (blks_left < per_indir) return get_nth_blknum(ino, n);
	blks_left -= per_indir;

	if (blks_left == 0) return ino.i_block_biindir;

	/* remove biindir block */
	n--;
	blks_left--;

	/* triindir? */
	if (blks_left >= per_indir+per_indir*per_indir) {
		DEBUG_WRITE = 6666666666666;
		DEBUG_WRITE = blks_left;
		return 99999999999999;
	}

	indir_num = blks_left / per_indir;
	indir_off = blks_left % per_indir;

	n -= indir_num + 1;
	if (indir_off == 0) {
		/* indir blk */
		return  ext2_indir_in_bi_lookupblk(ino, n);
	}

	return get_nth_blknum(ino, n);
}

ext2_data_block get_nth_meta(ext2_inode ino, uint n)
{
	blknum_t	blknum;
	blknum = get_nth_meta_blknum(ino, n);
	return ext2_data_block_lookup(blknum);
}

ext2_inode get_inode(uint ino_num_logical)
{
	int	ino_num;
	int	grp_idx;
	int	ino_tab_idx;
	int	ino_tab_off;
	int	ino_idx;
	int	table_blk;
	int	blk_num;

	ino_num = ino_num_logical - 1;
	grp_idx = ino_num / ext2_sb.s_inos_per_grp;
	ino_tab_idx = ino_num % ext2_sb.s_inos_per_grp;
	ino_tab_off = ino_tab_idx / (get_block_size()/EXT2_GOOD_OLD_INODE_SIZE);
	ino_idx = ino_tab_idx % (get_block_size()/EXT2_GOOD_OLD_INODE_SIZE);
	table_blk = disk.grp_desc_table[grp_idx].inode_table;

	blk_num = (table_blk + ino_tab_off) - blocks_off(disk.sb);
	return disk.blocks[blk_num].ino_blk.ino[ino_idx];
}

bool S_ISDIR(u32 mode)
{
	if ((mode & S_IFDIR) == S_IFDIR) return true;
	return false;
}

bool S_ISREG(u32 mode)
{
	if ((mode & S_IFREG) == S_IFREG) return true;
	return false;
}
