uint get_block_size(nilfs_sb nsb)
{
	return (1 << (nsb.s_log_block_size + 10));
}

int segsum_len(nilfs_segment_summary_header ss)
{
	if (ss.ss_magic != NILFS_SEGSUM_MAGIC) return 56;
	return ss.ss_bytes;
}

nilfs_segment get_segment(segnum_t segnum)
{
	return disk.segs[segnum];
}

u64 nilfs_sb2_offset_bytes(u64 devsize)
{
	return (((devsize) >> 12) - 1) << 12;
}

nilfs_block nilfs_get_block(blocknum_t bn)
{
	nilfs_segment	seg;
	seg = get_segment(block_to_segnum(bn));
	return seg.seg_blocks[bn % nilfs_sb.s_blocks_per_segment];
}

/* get actual block from vblock value */
nilfs_block nilfs_get_vblock_block(vblknum_t vblk)
{
	nilfs_finfo	fi;

	/* 1. find DAT file */
	/* 2. scan DAT file */
	fi = nilfs_get_inode_block_finfo(NILFS_INO_DAT, 0);
	DEBUG_WRITE_TYPE = fi;
	/* XXX WRONG */
	return nilfs_get_block(10);
}

nilfs_block nilfs_get_inode_block(nilfs_inode ni, inonum_t inum, blkoff_t boff)
{
	int	err;
	err = fsl_fail(10000);
	return nilfs_get_block(0);
}

vblknum_t nilfs_get_inode_vblock(inonum_t ino, blkoff_t boff)
{
	nilfs_finfo	fi;
	int		blk_i;
	int		max_blk_i;

	if (ino == NILFS_INO_DAT) DEBUG_WRITE = fsl_fail(1);

	fi = nilfs_get_inode_block_finfo(ino, boff);
	blk_i = 0;
	max_blk_i = fi.fi_ndatablk;
	// is this necessary?
	while (blk_i < max_blk_i) {
		if (fi.fi_file_data[blk_i].bi_blkoff == boff)
			return fi.fi_file_data[blk_i].bi_vblocknr;
		blk_i++;
	}
	DEBUG_WRITE = fsl_fail(2);
	return 0;
}

/* finds finfo corresponding to block we want */
nilfs_finfo nilfs_get_inode_block_finfo(inonum_t inum, blkoff_t boff)
{
	nilfs_finfo		fi;
	int			num_segs;
	int			i;

	i = 0;
	num_segs = nilfs_sb.s_nsegments;
	// iterate over every segment
	while (i < num_segs)  {
		nilfs_segment		cur_seg;
		nilfs_segment_summary	cur_segsum;
		int			finfo_i;
		int			finfo_max;

		cur_seg = get_segment(i);
		cur_segsum = cur_seg.seg_sum;
		finfo_max = cur_segsum.ss_header.ss_nfinfo;
		finfo_i = 0;
		while (finfo_i < finfo_max) {
			fi = cur_segsum.ss_finfo[finfo_i];
			if (fi.fi_ino == inum) {
				int	blk_i;
				int	max_blk_i;

				blk_i = 0;
				if (inum == NILFS_INO_DAT) {
					max_blk_i = fi.fi_nblocks - fi.fi_ndatablk;
					while (blk_i < max_blk_i) {
						if (fi.fi_dat_node[i].bi_blkoff == blk_i)
							return fi;
						blk_i++;
					}
				} else {
					max_blk_i = fi.fi_ndatablk;
					while (blk_i < max_blk_i) {
						if (fi.fi_file_data[i].bi_blkoff == boff)
							return fi;
						blk_i++;
					}
				}
			}
			finfo_i++;
		}
		i++;
	}

	DEBUG_WRITE = fsl_fail(3);
	return fi;
}

blocknum_t nilfs_segblock_first(segnum_t segnum)
{
	if (segnum == 0)
		return nilfs_sb.s_first_data_block;
	return nilfs_sb.s_blocks_per_segment * segnum;
}

blocknum_t nilfs_segblock_last(segnum_t segnum)
{
	u64	fake_start;
	fake_start = nilfs_sb.s_blocks_per_segment * segnum;
	return fake_start + (nilfs_segblock_first(segnum+1) - 1);
}

blockcount_t nilfs_seg_blocks(segnum_t segnum)
{
	return (nilfs_segblock_last(segnum) - nilfs_segblock_first(segnum))+1;
}

/* XXX we need a mechanism in FSL to get a type if and only if some preamble
 * properties are satisfied */
nilfs_sb get_valid_sb(disk d)
{
	/* XXX-- use nilfs_valid_sb algorithm */
	return d.nsb;
}

segnum_t block_to_segnum(blocknum_t blocknr)
{
	return blocknr / nilfs_sb.s_blocks_per_segment;
}

int is_ino_dat(nilfs_finfo fi)
{
	if (fi.fi_ino == NILFS_INO_DAT) return 1; return 0;
}

int get_segoff(nilfs_segment_summary ss, int fi_idx)
{
	int	i;
	int	ret;
	i = 0;
	ret = 0;
	while (i < fi_idx) {
		ret += ss.ss_finfo[i].fi_nblocks;
		i++;
	}
	return ret;
}

int get_finfo_blocks(nilfs_segment seg, int n_finfo)
{
	nilfs_segment_summary	ss;
	int			i;
	int			ret;

	i = 0;
	ret = 0;
	ss = seg.seg_sum;
	while (i < n_finfo) {
		ret += ss.ss_finfo[i].fi_nblocks;
		i++;
	}

	return ret;
}
