uint bytes_per_cluster() { return bpb.sectors_per_cluster*bpb.bytes_per_sector; }
clusternum_t fat_next(uint cluster_num)
{
	fat_type	ft;
	fat		f;

	ft = get_fat_type(bpb);
	f = disk.fats[0];

	if (ft == FAT_TYPE_FAT12) return f.ent12[cluster_num].cluster_num;
	else if (ft == FAT_TYPE_FAT16) return f.ent16[cluster_num].cluster_num;
	else if (ft == FAT_TYPE_FAT32) return f.ent32[cluster_num].cluster_num;

	return fsl_fail(1);
}

bool is_cluster_avail(clusternum_t cn)
{
	clusternum_t	v;
	v = fat_next(cn);
	if (v == FAT_ENT_FREE) return true;
	return false;
}

clusternum_t get_nth_cnum(fat_de de, uint i)
{
	clusternum_t cur_cluster;

	cur_cluster = (de.first_cluster_hi << 16) + de.first_cluster_lo;
	/* follow clusters. Need while loops, better error handling */
	while (i > 1) {
		cur_cluster = fat_next(cur_cluster);
		i = i - 1;
	}

	return cur_cluster;
}

cluster get_nth(fat_de de, uint i)
{
	clusternum_t	cn;
	cn = get_nth_cnum(de, i);
	return get_cluster(cn);
}

cluster get_cluster(clusternum_t cn) { return disk.clusters[cn-2]; }

bool is_good_dir(fat_de de)
{
	if (de.file_size == 0xffffffff) return false;
	if ((DIR_MASK & de.attr) != ATTR_DIRECTORY) return false;
	if (de.name[0] == '.') {
		if (de.name[1] == ' ') return false;
		if (de.name[1] == '.' && de.name[2] == ' ')
			return false;
	}
	return true;
}

bool is_deleted(fat_de de)
{
	if (de.name[0] == DEL_FLAG || de.name[0] == 0)
		return true;
	return false;
}

uint de_cluster_count(fat_de de)
{
	u32	bpc;

	if (de.file_size == 0xffffffff) return 0;

	if ( (ATTR_DIRECTORY & de.attr) != 0)  {
		clusternum_t 	cur_clus;
		u32		count;

		count = 0;
		cur_clus = de.first_cluster_lo + (de.first_cluster_hi << 16);

		while (is_valid_cnum(cur_clus) == true) {
			count++;
			cur_clus = fat_next(cur_clus);
		}

		return count;
	}

	bpc = bytes_per_cluster();
	return ((de.file_size + bpc - 1) / bpc);
}

bool is_valid_cnum(clusternum_t cnum)
{
	fat_type	ft;

	if (cnum < FAT_START_ENT) return false;

	ft = get_fat_type(bpb);
	if (ft == FAT_TYPE_FAT12) {
		if (cnum > FAT12_MAX)
			return false;
		return true;
	} else if (ft == FAT_TYPE_FAT16) {
		if (cnum > FAT16_MAX)
			return false;
		return true;
	} else if (ft == FAT_TYPE_FAT32) {
		if (cnum > FAT32_MAX)
			return false;
		return true;
	}

	return false;
}

uint get_fat_sectors(bpb b)
{
	if (b.sectors_in_fat16 != 0)
		return b.sectors_in_fat16;
	return b.priv32.sectors_in_fat32;
}

uint get_fat_bytes(bpb b)
{
	return get_fat_sectors(b)*b.bytes_per_sector;
}


uint get_total_sectors(bpb b)
{
	if (b.total_sect16 != 0)
		return b.total_sect16;
	return b.total_sect32;
}

uint get_cluster_count(bpb b)
{
	uint	fat_sectors;
	uint	total_sectors;
	uint	root_dir_sectors;
	uint	data_sectors;
	uint	resv_sectors;
	uint	cluster_c;
	uint	bps;

	fat_sectors = get_fat_sectors(b);
	total_sectors  = get_total_sectors(b);
	bps = b.bytes_per_sector;

	root_dir_sectors = b.root_de_c * sizeof_bytes(fat_de);
	root_dir_sectors += bps - 1;
	root_dir_sectors /= bps;

	resv_sectors = b.reserved_sector_c;
	resv_sectors += b.fat_count*fat_sectors;
	resv_sectors += root_dir_sectors;

	data_sectors = total_sectors - resv_sectors;
	cluster_c = data_sectors / b.sectors_per_cluster;

	return cluster_c;
}

fat_type get_fat_type(bpb b)
{
	uint cluster_count;

	cluster_count = get_cluster_count(b);
	if (cluster_count < 4085)
		return FAT_TYPE_FAT12;
	else if (cluster_count < 65525)
		return FAT_TYPE_FAT16;
	return FAT_TYPE_FAT32;
}

uint get_fatent_bits(bpb b)
{
	if (is_fat12(b)) return 12;
	if (is_fat16(b)) return 16;
	if (is_fat32(b)) return 32;
	return 0;
}

bool is_fat12(bpb b) {
	if (get_fat_type(b) == FAT_TYPE_FAT12)
		return true;
	return false;
}

bool is_fat16(bpb b){
	if (get_fat_type(b) == FAT_TYPE_FAT16)
		return true;
	return false;
}

bool is_fat32(bpb b){
	if (get_fat_type(b) == FAT_TYPE_FAT32)
		return true;
	return false;
}
