type disk
assert ( ? (d_bpb.bytes_per_sector & (512 - 1)) == 0)
assert ( ? d_bpb.reserved_sector_c > 0)
assert ( ? get_cluster_count(d_bpb) <=
	((get_fat_bytes(d_bpb)*8)/get_fatent_bits(d_bpb)-2) )
{
	bpb		d_bpb;
	align_bytes(d_bpb.bytes_per_sector);
	skip_bytes(d_bpb.bytes_per_sector * (d_bpb.reserved_sector_c - 1));
	fat		fats[d_bpb.fat_count] fixed;
	align_bytes(d_bpb.bytes_per_sector);
	fat_de		root_dir[d_bpb.root_de_c] fixed;
	align_bytes(d_bpb.bytes_per_sector);
	cluster		clusters[get_cluster_count(d_bpb)] fixed;
}

type cluster { u8 data[bytes_per_cluster()]; }
type file_cluster { u8 data[bytes_per_cluster()]; }
type fat_dir(int num_ents) { fat_de de[num_ents] fixed; }

type fat_de
assert (? is_deleted(this) == false)
virtual_if(
	? file_size != 0xffffffff && ((DIR_MASK & attr) == 0),
	file_cluster,
	i, 1, de_cluster_count(this), get_nth(this, i)) as vfile
virtual_if(
	? is_good_dir(this) == true,
	fat_de,
	i, 1, de_cluster_count(this), get_nth(this, i)) as vdir
relocate(
	j, 1, de_cluster_count(this), get_nth(this, j),
	i, FAT_START_ENT, get_cluster_count(bpb),
		get_cluster(i), ? is_cluster_avail(i),
	block_alloc(i),
	block_relink(this, j, i),
	block_replace(get_nth_cnum(this, j))) as reloc_file
/*
points_if(
	? first_cluster_hi != 0xffff,
	disk.clusters[(first_cluster_lo + (first_cluster_hi << 16))]) as clusters
points_if(
	? is_fat12(bpb) && first_cluster_hi != 0xffff && file_size > 0,
	disk.fats[0].ent12[(first_cluster_lo + (first_cluster_hi << 16))]) as clus12
points_if(
	? is_fat16(bpb) && first_cluster_hi != 0xffff && file_size > 0,
	disk.fats[0].ent16[(first_cluster_lo + (first_cluster_hi << 16))]) as clus16
points_if(
	? is_fat32(bpb) && first_cluster_hi != 0xffff && file_size > 0,
	disk.fats[0].ent32[(first_cluster_lo + (first_cluster_hi << 16))]) as clus32
*/
{
	u8		name[8+3];	/* name + ext */
	u8		attr;
	u8		nters;	/* special NT data */
	u8		time_create_ms;
	u16		time_create_time;
	u16		time_create_date;
	u16		time_lastaccess_date;
	u16		first_cluster_hi;
	u16		time_write_time;
	u16		time_write_date;
	u16		first_cluster_lo;
	u32		file_size;
}

type fat_long_de
assert (? (attr & ATTR_LONG_NAME_MASK) == ATTR_LONG_NAME)
assert (? first_cluster_lo == 0)
{
	u8	order;
	u8	name[10];
	u8	attr;
	u8	de_type;
	u8	chksum;
	u8	name2[12];
	u16	first_cluster_lo;
	u8	name3[4];
}

type bpb_16 {
	u8	drvnum;
	u8	resv1;
	u8	bootsig;
	u8	volid[4];
	u8	vollabel[11];
	u8	fs_str[8];
}

type bpb_32 {
	u32	sectors_in_fat32;
	u16	ext_flags;
	u16	fsver;
	u32	root_cluster;
	u16	fsinfo;
	u16	bkbootsector;
	u8	reserved[12];
	u8	drvnum;
	u8	resv1;
	u8	bootsig;
	u32	volid;
	u8	vollabel[11];
	u8	fs_str[8];
}

type bpb
assert (? is_fat12(this) || is_fat16(this) || is_fat32(this))
{
	u8		jmp[3];
	u8		oem_name[8];
	u16		bytes_per_sector;
	u8		sectors_per_cluster;
	u16		reserved_sector_c;
	u8		fat_count;
	u16		root_de_c;
	u16		total_sect16;
	u8		media;
	u16		sectors_in_fat16;
	u16		sec_per_track;
	u16		num_heads;
	u32		hidden_sec;
	u32		total_sect32;
//	assert_eq (from_base_bits(), 36*8);
	if (get_fat_type(bpb) == FAT_TYPE_FAT32) {
		bpb_32	priv32;
	} else {
		bpb_16	priv16;
	}
}

type fat_ent12
points_if(? cluster_num > 0 && cluster_num < BAD_FAT12, fat.ent12[cluster_num]) as next_fatent
points_if(? cluster_num > 0 && cluster_num < BAD_FAT12, disk.clusters[cluster_num]) as clus_data
{
	u12	cluster_num;
}

type fat_ent16
//points_if(? cluster_num > 0 && cluster_num < BAD_FAT16, fat.ent16[cluster_num]) as next_fatent
//points_if(? cluster_num > 0 && cluster_num < BAD_FAT16, disk.clusters[cluster_num]) as clus_data
{
	u16	cluster_num;
}

type fat_ent32
//points_if(? cluster_num > 0 && cluster_num < BAD_FAT32, fat.ent32[cluster_num]) as next_fatent
//points_if(? cluster_num > 0 && cluster_num < BAD_FAT32, disk.clusters[cluster_num]) as clus_data
{
	u32	cluster_num;
}

type fat
free(ent16, disk.clusters, 0)
free(ent12, disk.clusters, 0)
free(ent32, disk.clusters, 0)
{
	if (is_fat12(bpb)) {
		fat_ent12	ent12[FAT_START_ENT+get_cluster_count(bpb)];
	} else if (is_fat16(bpb)) {
		fat_ent16	ent16[FAT_START_ENT+get_cluster_count(bpb)];
	} else if (is_fat32(bpb)) {
		fat_ent32	ent32[FAT_START_ENT+get_cluster_count(bpb)];
	} else {
		fsl_fail(2);
	}
	set_bytes(get_fat_sectors(bpb)*bpb.bytes_per_sector);
}
