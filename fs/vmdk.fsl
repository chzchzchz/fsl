const __FSL_FSNAME = vmdk;

include "assert.fsl"
include "signed.fsl"
include "vmdk_funcs.fsl"

const VMDK3_MAGIC =  (('D' << 24) | ('W' << 16) | ('O' << 8) | 'C');
const VMDK4_MAGIC = (('V' << 24) | ('M' << 16) | ('D' << 8) | 'K');

type VMDK3Header {
	u32 disk_sectors;
	u32 granularity;
	u32 l1dir_offset;
	u32 l1dir_size;
	u32 file_sectors;
	u32 cylinders;
	u32 heads;
	u32 sectors_per_track;
}

type VMDK4Header
assert (?
	check_bytes[0] == 0xa &&
	check_bytes[1] == 0x20 &&
	check_bytes[2] == 0xd &&
	check_bytes == 0xa) as v4_check_bytes
{
	s64 capacity;
	s64 granularity;
	s64 desc_offset;
	s64 desc_size;
	s32 num_gtes_per_gte;
	s64 rgd_offset;
	s64 gd_offset;
	s64 grain_offset;
	u8 filler[1];
	u8 check_bytes[4];
}

type desc { u8 dat[disk.hdr.v4.desc_size]; }

type VMDKHeader
{
	if (magic() == VMDK3_MAGIC) {
		VMDK3Header	v3;
	} else if (magic() == VMDK4_MAGIC) {
		VMDK4Header	v4;
	}
}

type l1 { u32 dat[l1_size() * 4]; }
type l2 { u32 dat[l2_size() * 4]; }
type sector { u8 dat[SSZ]; }
type cluster { sector dat[cluster_sectors()]; }
type vdisk { sector lba[total_sectors()]; }

type disk
assert(? magic == VMDK4_MAGIC || magic == VMDK3_MAGIC) as version_magic
virtual(vdisk, i, 0, total_sectors(), disk.sectors[lba_to_sectidx(i)]) as lun
{
	u32		magic;
	u32		version;
	u32		flags;
	VMDKHeader	hdr;

	set_bytes(l1_table_offset());
	l1 l1_table;
	if (l1_backup_table_offset() != 0) {
		set_bytes(l1_backup_table_offset());
		l1 l1_backup;
	}

	if (magic == VMDK4_MAGIC) {
		set_bytes(hdr.v4.desc_offset*512);
		desc	img_desc;
	}

	set_bytes(0);
	l2	leafs[__FROM_OS_BDEV_BYTES/sizeof_bytes(l2)] fixed nofollow;
	set_bytes(0);
	cluster	clusters[(__FROM_OS_BDEV_BYTES/SSZ)/cluster_sectors()] fixed nofollow;
	set_bytes(0);
	sector sectors[__FROM_OS_BDEV_BYTES/SSZ] fixed nofollow;
}
